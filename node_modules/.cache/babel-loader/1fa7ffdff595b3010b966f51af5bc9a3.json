{"ast":null,"code":"var _jsxFileName = \"/Users/faj/Desktop/hellofresh-challenge/src/components/RecipeDetails/index.js\",\n    _s = $RefreshSig$();\n\nimport Header from \"../Header\";\nimport React, { useState } from \"react\";\nimport useStyles from \"./styles\";\nimport { BindInfo } from \"./service\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport CheckRoundedIcon from \"@material-ui/icons/CheckRounded\";\nimport CloseRoundedIcon from \"@material-ui/icons/CloseRounded\";\nimport { Box, Typography, CircularProgress, Divider } from \"@material-ui/core\";\nimport { Rating } from \"@material-ui/lab\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Scene() {\n  _s();\n\n  const classes = useStyles();\n  const location = useLocation();\n  const [load, setLoad] = useState(true);\n  const [recipeId, setRecipeId] = useState(location.state.recipeId);\n  const [details, setDetails] = useState();\n  useEffect(() => {\n    async function getData() {\n      setDetails(await BindInfo(recipeId));\n      setLoad(false);\n    }\n\n    getData();\n  }, [recipeId]);\n  return load ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n    className: classes.load\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.header,\n      children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.body,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.box,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          className: classes.detailimg,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: details.image,\n            alt: details.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.info,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.lines,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              align: \"left\",\n              children: details.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.lines,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"overline\",\n              children: \"Gluten-free:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this), details.glutenFree ? /*#__PURE__*/_jsxDEV(CheckRoundedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(CloseRoundedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 60\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.lines,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: \"Health Score:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Rating, {\n              name: \"read-only\",\n              value: details.healthScore,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.lines,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: [\"Minutes: \", details.cookingMinutes]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.lines,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: \"Ingredients:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.ingredients,\n            children: details.extendedIngredients.map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.lines,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"overline\",\n                children: [ingredient.name, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: ingredient.original\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Scene, \"zhpFPbTJEh7TxOGtXxrC/9jr1n0=\", false, function () {\n  return [useStyles, useLocation];\n});\n\n_c = Scene;\nexport default Scene;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scene\");","map":{"version":3,"sources":["/Users/faj/Desktop/hellofresh-challenge/src/components/RecipeDetails/index.js"],"names":["Header","React","useState","useStyles","BindInfo","useEffect","useLocation","CheckRoundedIcon","CloseRoundedIcon","Box","Typography","CircularProgress","Divider","Rating","Scene","classes","location","load","setLoad","recipeId","setRecipeId","state","details","setDetails","getData","root","header","body","box","detailimg","image","title","info","lines","glutenFree","healthScore","cookingMinutes","ingredients","extendedIngredients","map","ingredient","name","original"],"mappings":"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","sourcesContent":["import Header from \"../Header\";\nimport React, { useState } from \"react\";\nimport useStyles from \"./styles\";\nimport { BindInfo } from \"./service\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport CheckRoundedIcon from \"@material-ui/icons/CheckRounded\";\nimport CloseRoundedIcon from \"@material-ui/icons/CloseRounded\";\nimport { Box, Typography, CircularProgress, Divider } from \"@material-ui/core\";\nimport { Rating } from \"@material-ui/lab\";\n\nfunction Scene() {\n  const classes = useStyles();\n  const location = useLocation();\n  const [load, setLoad] = useState(true);\n  const [recipeId, setRecipeId] = useState(location.state.recipeId);\n  const [details, setDetails] = useState();\n\n  useEffect(() => {\n    async function getData() {\n      setDetails(await BindInfo(recipeId));\n      setLoad(false);\n    }\n    getData();\n  }, [recipeId]);\n\n  return load ? (\n    <CircularProgress className={classes.load} />\n  ) : (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        <Header />\n      </div>\n      <div className={classes.body}>\n        <Box className={classes.box}>\n          <Box className={classes.detailimg}>\n            <img src={details.image} alt={details.title} />\n          </Box>\n          <Box className={classes.info}>\n            <div className={classes.lines}>\n              <Typography variant=\"h4\" align=\"left\">\n                {details.title}\n              </Typography>\n            </div>\n            <div className={classes.lines}>\n              <Typography variant=\"overline\">Gluten-free:</Typography>\n\n              {details.glutenFree ? <CheckRoundedIcon /> : <CloseRoundedIcon />}\n            </div>\n            <div className={classes.lines}>\n              <Typography variant=\"body1\">Health Score:</Typography>\n              <Rating name=\"read-only\" value={details.healthScore} readOnly />\n            </div>\n            <Divider />\n            <div className={classes.lines}>\n              <Typography variant=\"body1\">\n                Minutes: {details.cookingMinutes}\n              </Typography>\n            </div>\n            <Divider />\n            <div className={classes.lines}>\n              <Typography variant=\"body1\">Ingredients:</Typography>\n            </div>\n            <div className={classes.ingredients}>\n              {details.extendedIngredients.map((ingredient) => (\n                <div className={classes.lines}>\n                  <Typography variant=\"overline\">{ingredient.name}:</Typography>\n                  <Typography variant=\"body2\">{ingredient.original}</Typography>\n                </div>\n              ))}\n            </div>\n            <Divider />\n          </Box>\n        </Box>\n      </div>\n    </div>\n  );\n}\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}